pub const DEFAULT_STACKPOINTER_USER: u32 = 0x03007F00;
pub const DEFAULT_STACKPOINTER_IRQ: u32 = 0x03007FA0;
pub const DEFAULT_STACKPOINTER_SUPERVISOR: u32 = 0x03007FE0;

// ProgramStatusRegister related bitfields and operations
mod psr {
    #![allow(dead_code)] // for associated functions generated by `bitfield`
    use modular_bitfield::{bitfield, specifiers::*, BitfieldSpecifier};

    #[derive(BitfieldSpecifier, Debug)]
    #[bits = 5]
    pub enum ProcessorMode {
        User = 0b10000,
        // FastInterruptRequest. Unused by default.
        Fiq = 0b10001,

        // InterruptRequest. Mode entered when hardware triggers an interrupt.
        Irq = 0b10010,
        Super = 0b10011,
        Abort = 0b10111,
        Undefined = 0b11011,
        System = 0b11111,
    }

    #[bitfield(bits = 32)]
    #[derive(Debug)]
    pub struct ProgramStatusRegister {
        processor_mode: ProcessorMode,

        // Thumb state indicator. If set, CPU is in Thumb state. Otherwise in normal ARM state.
        thumb_state: B1,

        // FIQ interrupt disable. If set, disables FIQ interrupts.
        fiq_interrupts_disable: B1,

        // IRQ interrupt disable. If set, disabled IRQ interrupt. Is set by default when IRQ mode is entered.
        irq_interrupts_disable: B1,

        // Not used
        reserved: B20,

        // Overflow condition code
        overflow_condition: B1,

        // Carry/Borrow/Extend condition code
        cbe_condition: B1,

        // Zero/equal condition code
        zero_condition: B1,

        // Negative/less than condition code
        neg_condition: B1,
    }

    impl Default for ProgramStatusRegister {
        fn default() -> Self {
            Self::new().with_processor_mode(ProcessorMode::User)
        }
    }
}

#[derive(Default, Debug)]
pub(crate) struct Register(pub u32);

#[derive(Default, Debug)]
pub(crate) struct CpuRegisters {
    // General purpose registers
    pub r0: Register,
    pub r1: Register,
    pub r2: Register,
    pub r3: Register,
    pub r4: Register,
    pub r5: Register,
    pub r6: Register,
    pub r7: Register,

    pub r8: Register,
    pub r8_fiq: Register, // FIQ banked register

    pub r9: Register,
    pub r9_fiq: Register, // FIQ banked register

    pub r10: Register,
    pub r10_fiq: Register, // FIQ banked register

    pub r11_fp: Register,  // Framepointer register
    pub r11_fiq: Register, // FIQ banked register

    pub r12: Register,
    pub r12_fiq: Register, // FIQ banked register

    // Special registers
    // Stack pointer register
    pub r13_sp: Register,
    pub r13_irq: Register, // IRQ banked register
    pub r13_fiq: Register, // FIQ banked register

    // Link register. Used to store address following a `bl` (branch + link) instruction.
    pub r14_lr: Register,
    pub r14_irq: Register, // IRQ banked register
    pub r14_fiq: Register, // FIQ banked register

    // Program counter. Is always 2 instructions ahead of the one currently being executed because of 3-stage pipeline.
    // In ARM state: 8 bytes ahead, in Thumb state: 4 bytes ahead.
    pub r15_pc: Register,

    // Current Program Status Register. Status bits relevant to the CPU.
    pub cspr: psr::ProgramStatusRegister,
    // Saved Program Status Register, banked for IRQ mode.
    pub spsr_irq: psr::ProgramStatusRegister,
    // Saved Program Status Register, banked for ABORT mode.
    pub spsr_abort: psr::ProgramStatusRegister,
    // Saved Program Status Register, banked for UNDEFINED mode.
    pub spsr_undefined: psr::ProgramStatusRegister,
    // Saved Program Status Register, banked for SUPERVISOR mode.
    pub spsr_supervisor: psr::ProgramStatusRegister,
}

impl CpuRegisters {
    pub fn new() -> Self {
        Self {
            r13_sp: Register(DEFAULT_STACKPOINTER_USER),
            ..Default::default()
        }
    }
}
