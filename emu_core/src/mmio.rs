use modular_bitfield::{bitfield, specifiers::*, BitfieldSpecifier};

pub(crate) mod graphics {
    #![allow(dead_code)] // for associated functions generated by `bitfield`
    use super::*;
    /// Memory-mapped hardware registers:
    /// https://www.cs.rit.edu/~tjh8300/CowBite/CowBiteSpec.htm#Memory-Mapped%20Hardware%20Registers

    /// Video mode determines how the GBA draws on the screen:
    /// https://www.cs.rit.edu/~tjh8300/CowBite/CowBiteSpec.htm#Mode%200
    #[derive(BitfieldSpecifier, Debug)]
    #[bits = 3]
    pub enum VideoMode {
        Mode0 = 0b000,
        Mode1 = 0b001,
        Mode2 = 0b010,
        Mode3 = 0b011,
        Mode4 = 0b100,
        Mode5 = 0b101,
    }

    // Addrss: 0x4000000
    #[bitfield(bits = 16)]
    #[derive(Debug)]
    pub struct DisplayControlRegister {
        video_mode: VideoMode,
        gbc_mode: B1, // Read only - stays at 0
        page_flip: B1,
        force_hblank_processing: B1,
        vram_sprite_dims: B1, // 1 = 1d, 0 = 2d
        force_blank_display: B1,
        display_bg0: B1,
        display_bg1: B1,
        display_bg2: B1,
        display_bg3: B1,
        display_oam: B1,
        window0_enabled: B1,
        window1_enabled: B1,
        sprite_windows_enabled: B1,
    }

    // Address: 0x4000004
    #[bitfield(bits = 16)]
    #[derive(Debug)]
    pub struct DisplayStatusRegister {
        v_refresh_status: B1,        // readonly
        h_refresh_status: B1,        // readonly
        vcount_triggered_status: B1, // 1 on Y trigger interrupts, readonly
        vblank_irq: B1,
        hblank_irq: B1,
        vcount_trigger: B1,
        unused: B2,
        vcount_line_trigger: B8,
    }

    // Address: 0x4000006
    pub struct LcdLocationY(u16);
}

pub(crate) mod background {
    #![allow(dead_code)] // for associated functions generated by `bitfield`
    use super::*;
    // Address: 0x4000008 - REG_BG0CNT
    // Address: 0x400000A - REG_BG1CNT
    // Address: 0x400000C - REG_BG2CNT
    // Address: 0x400000E - REG_BG3CNT
    #[bitfield(bits = 16)]
    #[derive(Debug)]
    pub struct BackgroundRegister {
        priority: B2,
        char_tile_start_addr: B2,
        unused: B2,
        mosaic_effect: B1,
        color_palette_type: B1,
        char_tile_map_start_addr: B5,
        screen_over: B1,
        // For "text" backgrounds:
        // 00 : 256x256 (32x32 tiles)
        // 01 : 512x256 (64x32 tiles)
        // 10 : 256x512 (32x64 tiles)
        // 11 : 512x512 (64x64 tiles)
        //
        // For rotational backgrounds:
        // 00 : 128x128 (16x16 tiles)
        // 01 : 256x256 (32x32 tiles)
        // 10 : 512x512 (64x64 tiles)
        // 11 : 1024x1024 (128x128 tiles)
        tile_map_size: B2,
    }

    // Address: 0x4000010 - REG_BG0HOFS Horizontal scroll co-ordinate for BG0 (Write Only)
    // Address: 0x4000012 - REG_BG0VOFS Vertical scroll co-ordinate for BG0 (Write Only)
    // Address: 0x4000014 - REG_BG1HOFS Horizontal scroll co-ordinate for BG1 (Write Only)
    // Address: 0x4000016 - REG_BG1VOFS Vertical scroll co-ordinate for BG1 (Write Only)
    // Address: 0x4000018 - REG_BG2HOFS Horizontal scroll co-ordinate for BG2 (Write Only)
    // Address: 0x400001A - REG_BG2VOFS Vertical scroll co-ordinate for BG2 (Write Only)
    // Address: 0x400001C - REG_BG3HOFS Horizontal scroll co-ordinate for BG3 (Write Only)
    // Address: 0x400001E - REG_BG3VOFS Vertical scroll co-ordinate for BG3 (Write Only)
    #[bitfield(bits = 16)]
    #[derive(Debug)]
    pub struct HorizontalScrollCoord {
        coord: B9,
        unused: B7,
    }

    #[bitfield(bits = 16)]
    #[derive(Debug)]
    pub struct VerticalScrollCoord {
        coord: B9,
        unused: B7,
    }

    // Addresses: 0x4000020 - 0x4000026 / 0x4000030 - 0x4000036
    // Background Rotation/Scaling Registers (Write Only)
    #[bitfield(bits = 16)]
    #[derive(Debug)]
    pub struct RotationScalingRegisters {
        fraction: B8,
        integer: B7,
        sign: B1,
    }
}

pub(crate) mod windowing {
    // Address: 0x4000040 - REG_WIN0H (Window 0 X Coordinates) (Write Only)
    // Address: 0x4000042 - REG_WIN1H (Window 1 X Coordinates)(Write Only)
    #[derive(Debug)]
    pub struct WindowXCoordinates {
        right: u8, // X coordinate for the rightmost side of the window
        left: u8,  // X coordinate for the leftmost side of the window
    }

    // Address: 0x4000044 - REG_WIN0V (Window 0 Y Coordinates) (Write Only)
    // Address: 0x4000046 - REG_WIN1V (Window 1 Y Coordinates)(Write Only)
    #[derive(Debug)]
    pub struct WindowYCoordinates {
        bottom: u8, // Y coordinate for the bottom of the window
        top: u8,    // Y coordinate for the top of the window
    }
}
